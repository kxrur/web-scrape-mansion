
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async loadMansions() : Promise<Result<Mansionee[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_mansions") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadDatabaseMansions() : Promise<Result<Mansionee[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_database_mansions") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadAllUrlMansions() : Promise<Result<Mansionee[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_all_url_mansions") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getMansionById(id: number) : Promise<Result<Mansionee, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_mansion_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async scrapeOneMansion(url: string) : Promise<Result<Mansionee, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("scrape_one_mansion", { url }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSettings() : Promise<Setting[] | null> {
    return await TAURI_INVOKE("get_settings");
},
async saveSetting(newSetting: NewSetting) : Promise<Setting | null> {
    return await TAURI_INVOKE("save_setting", { newSetting });
},
async getSettingById(id: number) : Promise<Result<Setting, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_setting_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateSetting(setting: Setting) : Promise<number | null> {
    return await TAURI_INVOKE("update_setting", { setting });
},
async getStoreMansions() : Promise<Result<Mansionee[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_store_mansions") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async addMansion(url: string) : Promise<Result<Mansionee, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("add_mansion", { url }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getMansionStateIdByDatabaseId(mansionee: Mansionee) : Promise<Result<number, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_mansion_state_id_by_database_id", { mansionee }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Error = { Network: string } | { Parsing: string } | { Scraping: string }
export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }
export type Mansionee = { id: number; uuid: string; address: string; price: number | null; size: number | null; bedrooms: number | null; bathrooms: number | null; receptions: number | null; house_type: string; pictures: JsonValue | null }
export type NewSetting = { profile: string | null; theme: string | null; db_path: string | null }
export type Setting = { id: number; profile: string | null; theme: string | null; db_path: string | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
